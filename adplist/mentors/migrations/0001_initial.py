# Generated by Django 4.0.9 on 2023-02-15 23:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('members', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('all_day', models.BooleanField(default=False, verbose_name='Always available? e.g. 24 hour service')),
                ('opening_time', models.DateTimeField(blank=True, null=True, verbose_name='Opening time of day (ignored if allDay = true)')),
                ('closing_time', models.DateTimeField(blank=True, null=True, verbose_name='Closing time of day (ignored if allDay = true)')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mentors.mentor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('BUSY', 'busy'), ('FREE', 'free')], max_length=10)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('comments', models.TextField(blank=True, null=True)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mentors.schedule')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotAvailable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(verbose_name='The reason that can be presented to the user as to why this time is not available.')),
                ('period_start', models.DateField(verbose_name='Service is not available (seasonally or for a public holiday) from this date.')),
                ('period_end', models.DateField(verbose_name='Service is not available (seasonally or for a public holiday) from this date.')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mentors.schedule')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MentorshipAreas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40)),
                ('mentors', models.ManyToManyField(to='mentors.mentor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DaysOfWeek',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('day', models.CharField(choices=[('MON', 'monday'), ('TUE', 'Tuesday'), ('WED', 'wednesday'), ('THU', 'thursday'), ('FRI', 'friday'), ('SAT', 'saturday'), ('SUN', 'sunday')], max_length=250, verbose_name='day of the week')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mentors.schedule')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('PENDING', 'pending'), ('BOOKED', 'booked'), ('CANCELLED', 'cancelled'), ('FULFILLED', 'fulfilled')], max_length=20)),
                ('start', models.DateTimeField(null=True)),
                ('end', models.DateTimeField(null=True)),
                ('minutes_duration', models.IntegerField(null=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='members.member')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mentors.mentor')),
                ('slot', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mentors.slot')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
